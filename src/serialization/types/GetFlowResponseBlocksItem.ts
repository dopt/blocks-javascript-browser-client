/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as DoptApi from "../../api";
import * as core from "../../core";

export const GetFlowResponseBlocksItem: core.serialization.ObjectSchema<
    serializers.GetFlowResponseBlocksItem.Raw,
    DoptApi.GetFlowResponseBlocksItem
> = core.serialization.object({
    kind: core.serialization.stringLiteral("block"),
    uid: core.serialization.string(),
    sid: core.serialization.string(),
    version: core.serialization.number(),
    state: core.serialization.lazyObject(async () => (await import("..")).GetFlowResponseBlocksItemState),
    containerUid: core.serialization.string().optional(),
    transitioned: core.serialization.record(core.serialization.string(), core.serialization.boolean()),
    type: core.serialization.lazy(async () => (await import("..")).GetFlowResponseBlocksItemType),
    fields: core.serialization.list(
        core.serialization.lazy(async () => (await import("..")).GetFlowResponseBlocksItemFieldsItem)
    ),
});

export declare namespace GetFlowResponseBlocksItem {
    interface Raw {
        kind: "block";
        uid: string;
        sid: string;
        version: number;
        state: serializers.GetFlowResponseBlocksItemState.Raw;
        containerUid?: string | null;
        transitioned: Record<string, boolean>;
        type: serializers.GetFlowResponseBlocksItemType.Raw;
        fields: serializers.GetFlowResponseBlocksItemFieldsItem.Raw[];
    }
}
